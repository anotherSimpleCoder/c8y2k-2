#!/bin/bash

help() {
	echo "c8y2k - A little tool for making the Cumulocity development easier"
	echo
	echo "Syntax:"
	echo -e "\tc8y2k <command>"
	echo
	echo -e "\tCommand:"
	echo -e "\t\thelp\t\t\tOpens this page"
	echo -e "\t\tnew\t\t\tCreates a new Cumulocity Web SDK project"
	echo -e "\t\tnew-microservice\tCreates a new Cumulocity Java Microservice"
	echo -e "\t\tnew-component\t\tCreates a new component"
	echo -e "\t\tnew-widget\t\tCreares a new widget component"
}

# COMPONENT content

COMPONENT_componentTsContent() {
	echo "import {Component, OnInit} from '@angular/core'"
	
	echo "@Component({"
	printf "\tselector: '%s'," $COMPONENT_NAME
	printf "\ttemplateUrl: '%s.component.html'," $COMPONENT_NAME
	printf "\tstyleUrls: ['%s.component.css']" $COMPONENT_NAME
	echo -e "})"
	printf "export class %sComponent implements OnInit {" $COMPONENT_NAME
	echo -e "\tcontructor(){}"
	echo
	echo -e "\tngOnInit() {}"
	echo "}"
}

COMPONENT_factoryTsContent() {
	echo "import {Injectable} from '@angular/core'"
	echo "import {NavigatorNode, NavigatorNodeFactory} from '@c8y/ngx-components'"
	echo
	echo "@Injectable()"
	printf "export class %sNavigationFactory implements NavigatorNodeFactory {" $COMPONENT_NAME
	echo -e "\tget() {"
	echo -e "\t\treturn new NavigatorNode({"
	printf "\t\t\tlabel: '%s'," $COMPONENT_NAME
	echo -e "\t\t\ticon: 'robot',"
	printf "\t\t\tpath: '%s'," $COMPONENT_NAME
	echo -e "\t\t\tprioirty: 100"
	echo -e "\t\t})"
	echo -e "\t}"
	echo "}"
}

COMPONENT_moduleTsContent() {
	echo "import {NgModule} from '@angular/core'"
	echo "import {RouterModule,Routes} from '@angular/router'"
	echo "import {CoreModule,hookNavigator} from '@c8y/ngx-components'"
	echo
	printf "import {%sComponent} from './%s.component'" $COMPONENT_NAME $COMPONENT_NAME
	printf "import {%sNavigationFactory} from './%s.factory'" $COMPONENT_NAME $COMPONENT_NAME
	echo
	echo "const routes: Routes = ["
	echo -e "\t{"
	echo -e "\t\tpath: '',"
	echo -e "\t\tpathMatch: 'full'"
	echo -e "\t},"
	echo
	echo -e "\t{"
	printf "\t\tpath: '%s'," $COMPONENT_NAME
	printf "\t\tcomponent: '%sComponent'" $COMPONENT_NAME
	echo -e "\t}"
	echo "]"
	echo
	echo "@NgModule({"
	echo -e "\timports: [RouterModule.forChild(routes), CoreModule],"
	echo -e "\texports: [],"
	printf "\tdeclarations: [%sComponent]," $COMPONENT_NAME
	printf "\tproviders: [hookNavigator(%sNavigationFactory)]" $COMPONENT_NAME
	echo "})"
	printf "export class %sModule{}" $COMPONENT_NAME
}

COMPONENT_serviceTsContent() {
	echo "import {Injectable, resolveForwardRef} from '@angular/core'"
	echo "import {Subject} from 'rxjs'"
	echo
	echo "@Injectable()"
	printf "export class %sService {" $COMPONENT_NAME
	echo -e "\tconstructor() {}"
	echo "}"
}

newComponent() {
	ENTERED="false"
	while [ $ENTERED != "true" ]; do
		printf "Enter your component name: "	
		read COMPONENT_NAME
		
		# check if component name is empty
		if [[ -z $COMPONENT_NAME ]]; then
			echo "Please enter a valid component name"
		else
			ENTERED="true"
		fi

	done
	
	# create source folders
	mkdir src
	mkdir src/$COMPONENT_NAME

	# create source files
	(
		cd "src/$COMPONENT_NAME"
		touch "$COMPONENT_NAME.component.html"
		touch "$COMPONENT_NAME.component.css"
		touch "$COMPONENT_NAME.model.ts"
		COMPONENT_componentTsContent > "$COMPONENT_NAME.component.ts"
		COMPONENT_factoryTsContent > "$COMPONENT_NAME.factory.ts"
		COMPONENT_moduleTsContent > "$COMPONENT_NAME.module.ts"
		COMPONENT_serviceTsContent > "$COMPONENT_NAME.service.ts"
	)

	echo "Created component successfully"
}

# WIDGET content
WIDGET_templateContent() {
	echo '<div class="p-1-16 p-r-16">'
	printf "\t<h1>{{'%s'}}</h1>" $WIDGET_NAME
	echo "</div>"
}

WIDGET_componentTsContent() {
	echo "import {Component,Input,OnInit} from '@angular/core'"
	echo
	echo "@Component({"
	printf "\tselector: '%s'," $WIDGET_NAME
	printf "\ttemplateUrl: '%s.component.html'," $WIDGET_NAME
	printf "\tstyleUrls: ['%s.component.css']" $WIDGET_NAME
	echo "})"
	printf "export class %sWidgetComponent implements OnInit {" $WIDGET_NAME
	echo -e "\t@Input() config: {device: {id: string, name: string}}"
	echo
	echo -e "\tconstructor() {}"
	echo
	echo -e "\tngOnInit() {}"
	echo "}"
}

WIDGET_moduleTsContent() {
	echo "import {NgModule} from '@angular/core'"
	echo "import {CoreModule, hookComponent} from '@c8y/ngx-components'"
	echo "import {ContextWidgetConfig} from '@c8y/ngx-components/context-dashboard'"
	echo
	printf "import {%sWidgetComponent} from './%s.component'" $WIDGET_NAME $WIDGET_NAME
	echo
	echo "@NgModule({"
	echo -e "\timports: [CoreModule],"
	echo -e "\texports: [],"
	printf "\tdeclarations: [%sWidgetComponent]," $WIDGET_NAME
	printf "\tproviders: [hookComponent({"
	printf "\t\tid: '%s.widget'," $WIDGET_NAME
	printf "\t\tlabel: '%s'," $WIDGET_NAME
	printf "\t\tdescription: '%s'," $WIDGET_NAME
	printf "\t\tcomponent: %sWidgetComponent," $WIDGET_NAME
	echo
	echo -e "\t\tdata: {"
	echo -e "\t\t\tsettings: {"
	echo -e "\t\t\t\tnoNewWidgets: false,"
	echo -e "\t\t\t\tng1: {"
	echo -e "\t\t\t\t\toptions: {"
	echo -e "\t\t\t\t\t\tnoDeviceTarget: false,"
	echo -e "\t\t\t\t\t\tgroupSelectable: false"
	echo -e "\t\t\t\t\t}"
	echo -e "\t\t\t\t}"
	echo -e "\t\t\t}"
	echo -e "\t\t} as ContextWidgetConfig"
	echo -e "\t})]"
	echo "})"
	printf "export class %sWidgetModule{}" $WIDGET_NAME
}

WIDGET_serviceTsContent() {
	echo "import {Injectable, resolveForwardRef} from '@angular/core'"
	echo "import {Subject} from 'rxjs'"
	echo
	echo "@Injectable()"
	printf "export class %sWidgetService {" $WIDGET_NAME
	echo -e "\tconstructor() {}"
	echo "}"
}

newWidget() {
	ENTERED="false"
	while [ $ENTERED != "true" ]; do
		printf "Enter your widget name: "	
		read WIDGET_NAME
		
		# check if widget name is empty
		if [[ -z $WIDGET_NAME ]]; then
			echo "Please enter a valid widget name"
		else
			ENTERED="true"
		fi

	done

	# check if widget name is empty

	# create source folders
	mkdir src
	mkdir src/$WIDGET_NAME

	# create source files
	(
		cd src/$WIDGET_NAME
		touch "$WIDGET_NAME.component.css"
		touch "$WIDGET_NAME.model.ts"
		WIDGET_templateContent > "$WIDGET_NAME.component.html"
		WIDGET_componentTsContent > "$WIDGET_NAME.component.ts"
		WIDGET_moduleTsContent > "$WIDGET_NAME.module.ts"
		WIDGET_serviceTsContent > "$WIDGET_NAME.service.ts"
	)

	echo "Created widget successfully!"
}

# Project content
newProject() {
	ENTERED="false"
	while [ $ENTERED != "true" ]; do
		printf "Enter your project name: "	
		read PROJECT_NAME
		
		# check if project name is empty
		if [[ -z $PROJECT_NAME ]]; then
			echo "Please enter a valid project name"
		else
			ENTERED="true"
		fi

	done

	npx @c8y/cli@latest new $PROJECT_NAME || error 11
	echo "Running npm install"
	(
		cd $PROJECT_NAME
		npm install || error 11
	)

	printf "Project %s successfully created!\n" $PROJECT_NAME
}

# Microservice content
newMicroservice() {
	git clone https://github.com/SoftwareAG/cumulocity-microservice-archetype
	(
		cd "cumulocity-microservice-archetype"
		mvn install
	)
	sudo rm -r cumulocity*
	mvn archetype:generate -DarchetypeGroupId=cumulocity.microservice -DarchetypeArtifactId=cumulocity-microservice-archetype

	echo "Create microservice successfully"
	docker --version > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "It seems like Docker has not been installed on your machine."
		echo "In order to deploy your microservice to Cumulocity, the Docker Engine is needed"
		# OS Unterscheidung
	fi
}

error() {
	error_code=$1
	case $error_code in
		10)
			echo "npm is not installed or falsely configured!"
			echo "c8y2k depends on npm, so in order to use it, please install npm!"
			# OS Unterscheidung
			;;
		11)
			echo "Exit due to node error!"
			;;
		12)
			echo "The Cumulocity Web SDK supports node.js version 14.x.x"
			echo "Please install another version or change your node version accordingly"
			# OS Unterscheidung
			;;
		13)
			echo "Apache Maven is not installed or falsely configured!"
			echo "c8y2k depends on Apache Maven, so in order to use it, please install Apache Maven!"
			# OS Unterscheidung
			;;
		14)
			echo "git is not installed or falsely configured!"
			echo "c8y2k depends on git, so in order to use it, please install git!"
			# OS Unterscheidung
			;;
	esac
	exit 1
}

# Check for dependencies
npm --version > /dev/null 2>&1 || error 10
node --version | grep "v14*" > /dev/null 2>&1 || error 12
mvn -v > /dev/null 2>&1 || error 13
git version > /dev/null 2>&1 || error 14

# flag filtering
case $1 in
	"help")
		help
		;;

	"new")
		newProject
		;;

	"new-microservice")
		newMicroservice
		;;
	
	"new-component")
		newComponent
		;;

	"new-widget")
		newWidget
		;;

	*)
		help	
		;;
esac
